From 47764b400ff3215afee9d325f5aa1843e58fd950 Mon Sep 17 00:00:00 2001
From: sebanc <sebanc.xda@gmail.com>
Date: Thu, 7 May 2020 18:43:41 +0900
Subject: [PATCH] chromeos: fakehwid: allow the generation of a hwid to update
 unibuild images

(patch generated by the following command:
`git diff chromeos-4.19:drivers/platform/x86/chromeos_acpi.c brunch/r81:kernel/drivers/platform/x86/chromeos_acpi.c`
Author: sebanc <sebanc.xda@gmail.com>
because there is no up-to-date commit or patch file yet but kernel tree
is available, so I diffed the two files.
Reference commit: https://github.com/sebanc/brunch/commit/028282426786d09496c61ea98200e5281867cad0)

This patch generates compliant hwid based on the device name so that
unibuild ChromeOS images can be updated.

[Changed commit title]
Signed-off-by: Tsuchiya Yuto (kitakar5525) <kitakar@gmail.com>
---
 drivers/platform/x86/chromeos_acpi.c | 46 ++++++++++++++++++++++++++++
 1 file changed, 46 insertions(+)

diff --git a/drivers/platform/x86/chromeos_acpi.c b/drivers/platform/x86/chromeos_acpi.c
index 342a19a9f7e45..98f22392e170a 100644
--- a/drivers/platform/x86/chromeos_acpi.c
+++ b/drivers/platform/x86/chromeos_acpi.c
@@ -36,6 +36,7 @@
 #include <linux/nvram.h>
 #include <linux/platform_device.h>
 #include <linux/acpi.h>
+#include <linux/crc32.h>
 
 #include "../chrome/chromeos.h"
 
@@ -760,6 +761,47 @@ static struct chromeos_vbc chromeos_vbc_nvram = {
 	.write = chromeos_vbc_nvram_write,
 };
 
+static char fakehwid[256] = "";
+
+static ssize_t fakehwid_show(struct device *dev, struct device_attribute *attr,
+			    char *buf)
+{
+	return sprintf(buf, "%s\n", fakehwid);
+}
+
+static ssize_t fakehwid_store(struct device *dev, struct device_attribute *attr,
+			     const char *buf, size_t count)
+{
+	static const char base8_alphabet[] = "23456789";
+	static const char base32_alphabet[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567";
+	char board[230];
+	char serial[256];
+	char crc[3];
+	u32 crc32_val;
+
+	if (count > 230)
+		return -EINVAL;
+
+       sscanf(buf, "%s", board);
+
+	if (!strncmp(board, "RAMMUS", 6))
+		strlcpy(board, "SHYVANA", 8);
+
+	snprintf(serial, sizeof(serial), "%s %s", board, "B2BB2BB2BB2BB2BB");
+
+	crc32_val = crc32(0 ^ 0xffffffff, serial, strlen(serial)) ^ 0xffffffff;
+
+	crc[0] = base8_alphabet[(crc32_val >> 5) & 0x7];
+	crc[1] = base32_alphabet[crc32_val & 0x1f];
+	crc[2] = '\0';
+
+	snprintf(fakehwid, sizeof(fakehwid), "%s %s%s", board, "B2B-B2B-B2B-B2B-B2B-B", crc);
+
+       return count;
+}
+
+static const DEVICE_ATTR(HWID, 0644, fakehwid_show, fakehwid_store);
+
 static int __init chromeos_acpi_init(void)
 {
 	int ret = 0;
@@ -778,6 +820,10 @@ static int __init chromeos_acpi_init(void)
 		return PTR_ERR(chromeos_acpi.p_dev);
 	}
 
+	device_create_file(&chromeos_acpi.p_dev->dev, &dev_attr_HWID);
+
+	return 0;
+
 	ret = acpi_bus_register_driver(&chromeos_acpi_driver);
 	if (ret < 0) {
 		printk(MY_ERR "failed to register driver (%d)\n", ret);
-- 
2.26.2

