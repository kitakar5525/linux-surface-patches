From 72e01f1a7665f407434eea4f29959592220ccb6c Mon Sep 17 00:00:00 2001
From: kitakar5525 <34676735+kitakar5525@users.noreply.github.com>
Date: Thu, 5 Dec 2019 16:05:07 +0900
Subject: [PATCH] Intel Atom suspend: add debug check for S0ix blockers

Add a notifier called just before entering S0ix
and register two callbacks for checking if all
hardware blocks in the north complex (controller by
punit) and south complex (controlled by pmc)
are in a state that allows the SoC to enter package S0ix.
Print an error message for any device in D0.

This is a port of patches
[PATCH 1/2] pm: Add pm suspend debug notifier for South IPs
[PATCH 2/2] pm: Add pm suspend debug notifier for North IPs
from https://github.com/MiCode/Xiaomi_Kernel_OpenSource latte-l-oss

Signed-off-by: Johannes Stezenbach <js@sig21.net>
Signed-off-by: Takashi Iwai <tiwai@suse.de>
---
v2: fix compile fail with !CONFIG_INTEL_IDLE found by kbuild test robot
v3: fix v2, kbuild test robot mercilessly uncovers sloppy coding

From: kitakar5525 <34676735+kitakar5525@users.noreply.github.com>
Ported for chromeos-5.4
---
 arch/x86/include/asm/intel_idle.h         | 12 +++++
 arch/x86/platform/atom/punit_atom_debug.c | 49 +++++++++++++++++++
 drivers/idle/intel_idle.c                 | 20 ++++++++
 drivers/platform/x86/pmc_atom.c           | 58 +++++++++++++++++++++++
 4 files changed, 139 insertions(+)
 create mode 100644 arch/x86/include/asm/intel_idle.h

diff --git a/arch/x86/include/asm/intel_idle.h b/arch/x86/include/asm/intel_idle.h
new file mode 100644
index 000000000000..401fcc3ca1e4
--- /dev/null
+++ b/arch/x86/include/asm/intel_idle.h
@@ -0,0 +1,12 @@
+#ifndef _ASM_X86_INTEL_IDLE_H
+#define _ASM_X86_INTEL_IDLE_H
+
+#include <linux/notifier.h>
+
+#ifdef CONFIG_PM_DEBUG
+void intel_idle_freeze_notifier_register(struct notifier_block *nb);
+void intel_idle_freeze_notifier_unregister(struct notifier_block *nb);
+#endif
+
+
+#endif /* _ASM_X86_INTEL_IDLE_H */
diff --git a/arch/x86/platform/atom/punit_atom_debug.c b/arch/x86/platform/atom/punit_atom_debug.c
index ee6b0780bea1..edf08c9788dc 100644
--- a/arch/x86/platform/atom/punit_atom_debug.c
+++ b/arch/x86/platform/atom/punit_atom_debug.c
@@ -16,6 +16,7 @@
 #include <asm/cpu_device_id.h>
 #include <asm/intel-family.h>
 #include <asm/iosf_mbi.h>
+#include <asm/intel_idle.h>
 
 /* Subsystem config/status Video processor */
 #define VED_SS_PM0		0x32
@@ -117,6 +118,47 @@ static void punit_dbgfs_unregister(void)
 	debugfs_remove_recursive(punit_dbg_file);
 }
 
+#if defined(CONFIG_PM_DEBUG) && defined(CONFIG_INTEL_IDLE)
+struct punit_notifier_block {
+	struct notifier_block nb;
+	struct punit_device *punit_device;
+};
+
+static int punit_freeze_cb(struct notifier_block *nb,
+			   unsigned long action, void *data)
+{
+	struct punit_notifier_block *punit_nb =
+		container_of(nb, struct punit_notifier_block, nb);
+	struct punit_device *punit_devp = punit_nb->punit_device;
+	u32 punit_pwr_status;
+	int index;
+	int status;
+	int cpu = action;
+
+	while (punit_devp->name) {
+		status = iosf_mbi_read(BT_MBI_UNIT_PMC, MBI_REG_READ,
+				       punit_devp->reg, &punit_pwr_status);
+		if (status) {
+			pr_err("punit debug: %s: read failed\n",
+			       punit_devp->name);
+		} else  {
+			index = (punit_pwr_status >> punit_devp->sss_pos) & 3;
+			if (!index)
+				pr_err("punit debug: cpu %d: %s is in D0 prior to freeze\n",
+				       cpu, punit_devp->name);
+		}
+		punit_devp++;
+	}
+	return 0;
+}
+
+static struct punit_notifier_block punit_freeze_nb = {
+	.nb = {
+		.notifier_call = punit_freeze_cb,
+	},
+};
+#endif
+
 #define ICPU(model, drv_data) \
 	{ X86_VENDOR_INTEL, 6, model, X86_FEATURE_MWAIT,\
 	  (kernel_ulong_t)&drv_data }
@@ -140,11 +182,18 @@ static int __init punit_atom_debug_init(void)
 
 	punit_dbgfs_register((struct punit_device *)id->driver_data);
 
+#if defined(CONFIG_PM_DEBUG) && defined(CONFIG_INTEL_IDLE)
+	punit_freeze_nb.punit_device = (struct punit_device *)id->driver_data;
+	intel_idle_freeze_notifier_register(&punit_freeze_nb.nb);
+#endif
 	return 0;
 }
 
 static void __exit punit_atom_debug_exit(void)
 {
+#if defined(CONFIG_PM_DEBUG) && defined(CONFIG_INTEL_IDLE)
+	intel_idle_freeze_notifier_unregister(&punit_freeze_nb.nb);
+#endif
 	punit_dbgfs_unregister();
 }
 
diff --git a/drivers/idle/intel_idle.c b/drivers/idle/intel_idle.c
index a5d6adc5b399..08e0e0508d1e 100644
--- a/drivers/idle/intel_idle.c
+++ b/drivers/idle/intel_idle.c
@@ -51,6 +51,7 @@
 #include <linux/moduleparam.h>
 #include <asm/cpu_device_id.h>
 #include <asm/intel-family.h>
+#include <asm/intel_idle.h>
 #include <asm/mwait.h>
 #include <asm/msr.h>
 
@@ -69,6 +70,22 @@ static unsigned int mwait_substates;
 /* Reliable LAPIC Timer States, bit 1 for C1 etc.  */
 static unsigned int lapic_timer_reliable_states = (1 << 1);	 /* Default to only C1 */
 
+#ifdef CONFIG_PM_DEBUG
+static RAW_NOTIFIER_HEAD(intel_idle_freeze_notifier);
+
+void intel_idle_freeze_notifier_register(struct notifier_block *nb)
+{
+	raw_notifier_chain_register(&intel_idle_freeze_notifier, nb);
+}
+EXPORT_SYMBOL(intel_idle_freeze_notifier_register);
+
+void intel_idle_freeze_notifier_unregister(struct notifier_block *nb)
+{
+	raw_notifier_chain_unregister(&intel_idle_freeze_notifier, nb);
+}
+EXPORT_SYMBOL(intel_idle_freeze_notifier_unregister);
+#endif
+
 struct idle_cpu {
 	struct cpuidle_state *state_table;
 
@@ -941,6 +958,9 @@ static int intel_idle_s2idle(struct cpuidle_device *dev,
 	unsigned long ecx = 1; /* break on interrupt flag */
 	unsigned long eax = flg2MWAIT(drv->states[index].flags);
 
+#ifdef CONFIG_PM_DEBUG
+	raw_notifier_call_chain(&intel_idle_freeze_notifier, dev->cpu, NULL);
+#endif
 	mwait_idle_with_hints(eax, ecx);
 
 	return 0;
diff --git a/drivers/platform/x86/pmc_atom.c b/drivers/platform/x86/pmc_atom.c
index 07d1b911e72f..c919930dbc94 100644
--- a/drivers/platform/x86/pmc_atom.c
+++ b/drivers/platform/x86/pmc_atom.c
@@ -16,6 +16,7 @@
 #include <linux/platform_device.h>
 #include <linux/pci.h>
 #include <linux/seq_file.h>
+#include <asm/intel_idle.h>
 
 struct pmc_bit_map {
 	const char *name;
@@ -463,6 +464,58 @@ static int pmc_setup_clks(struct pci_dev *pdev, void __iomem *pmc_regmap,
 	return 0;
 }
 
+#if defined(CONFIG_PM_DEBUG) && defined(CONFIG_INTEL_IDLE)
+struct pmc_notifier_block {
+	struct notifier_block nb;
+	struct pmc_dev *pmc;
+};
+
+static void pmc_dev_state_check(int cpu, u32 sts, const struct pmc_bit_map *sts_map,
+				u32 fd, const struct pmc_bit_map *fd_map)
+{
+	int index;
+
+	for (index = 0; sts_map[index].name; index++) {
+		if (!(fd_map[index].bit_mask & fd) &&
+		    !(sts_map[index].bit_mask & sts)) {
+			pr_err("pmc debug: cpu %d: %s is in D0 prior to freeze\n",
+			       cpu, sts_map[index].name);
+		}
+	}
+}
+
+static int pmc_freeze_cb(struct notifier_block *nb,
+			 unsigned long action, void *data)
+{
+	struct pmc_notifier_block *pmc_nb =
+		container_of(nb, struct pmc_notifier_block, nb);
+	struct pmc_dev *pmc = pmc_nb->pmc;
+	const struct pmc_reg_map *m = pmc->map;
+	u32 func_dis, func_dis_2;
+	u32 d3_sts_0, d3_sts_1;
+	int cpu = action;
+
+	func_dis = pmc_reg_read(pmc, PMC_FUNC_DIS);
+	func_dis_2 = pmc_reg_read(pmc, PMC_FUNC_DIS_2);
+	d3_sts_0 = pmc_reg_read(pmc, PMC_D3_STS_0);
+	d3_sts_1 = pmc_reg_read(pmc, PMC_D3_STS_1);
+
+	/* Low part */
+	pmc_dev_state_check(cpu, d3_sts_0, m->d3_sts_0, func_dis, m->func_dis);
+
+	/* High part */
+	pmc_dev_state_check(cpu, d3_sts_1, m->d3_sts_1, func_dis_2, m->func_dis_2);
+
+	return 0;
+}
+
+static struct pmc_notifier_block pmc_freeze_nb = {
+	.nb = {
+		.notifier_call = pmc_freeze_cb,
+	},
+};
+#endif
+
 static int pmc_setup_dev(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	struct pmc_dev *pmc = &pmc_device;
@@ -500,6 +553,11 @@ static int pmc_setup_dev(struct pci_dev *pdev, const struct pci_device_id *ent)
 		dev_warn(&pdev->dev, "platform clocks register failed: %d\n",
 			 ret);
 
+#if defined(CONFIG_PM_DEBUG) && defined(CONFIG_INTEL_IDLE)
+	pmc_freeze_nb.pmc = pmc;
+	intel_idle_freeze_notifier_register(&pmc_freeze_nb.nb);
+#endif
+
 	pmc->init = true;
 	return ret;
 }
-- 
2.24.1

