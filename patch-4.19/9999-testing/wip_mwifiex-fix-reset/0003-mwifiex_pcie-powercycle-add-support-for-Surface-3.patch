From f659a04f8eebc79d56c51172498775bc2ef459d3 Mon Sep 17 00:00:00 2001
From: "Tsuchiya Yuto (kitakar5525)" <kitakar@gmail.com>
Date: Mon, 20 Apr 2020 23:39:11 +0900
Subject: [PATCH 3/3] mwifiex_pcie: powercycle: add support for Surface 3

This sommit adds proper wifi reset feature. Using DSM_ call.

TODO: This is even not a powercycle. I checked pci devices D-states by
dynamic_debug feature [1] during this quirk, but D-states regarding wifi
didn't changed. So, rename this quirk to appropriate one?

[1] Run this command:
    $ echo 'file device_pm.c +p' | sudo tee /sys/kernel/debug/dynamic_debug/control

Signed-off-by: Tsuchiya Yuto (kitakar5525) <kitakar@gmail.com>
---
 drivers/net/wireless/marvell/mwifiex/pcie.c | 91 +++++++++++++++++++++
 1 file changed, 91 insertions(+)

diff --git a/drivers/net/wireless/marvell/mwifiex/pcie.c b/drivers/net/wireless/marvell/mwifiex/pcie.c
index 1560f74c84dee..9a7b7a6a80f13 100644
--- a/drivers/net/wireless/marvell/mwifiex/pcie.c
+++ b/drivers/net/wireless/marvell/mwifiex/pcie.c
@@ -17,6 +17,7 @@
  * this warranty disclaimer.
  */
 
+#include <linux/acpi.h>
 #include <linux/dmi.h>
 #include <linux/firmware.h>
 
@@ -32,8 +33,15 @@
 #define PCIE_VERSION	"1.0"
 #define DRV_NAME        "Marvell mwifiex PCIe"
 
+#define ACPI_WSID_PATH			"\\_SB.WSID"
+#define MSHW0009_DSM_UUID	"534ea3bf-fcc2-4e7a-908f-a13978f0c7ef"
+#define WSID_REV		0x0
+#define WSID_FUNC_WIFI_PWR_OFF		0x1
+#define WSID_FUNC_WIFI_PWR_ON		0x2
+
 static const struct dmi_system_id flr_surface_dmi_table[];
 static bool powercycle_d3cold;
+static bool powercycle_wsid;
 
 static struct mwifiex_if_ops pcie_ops;
 
@@ -301,6 +309,14 @@ static int dmi_powercycle_d3cold(const struct dmi_system_id *d)
 	return 0;
 }
 
+static int dmi_powercycle_wsid(const struct dmi_system_id *d)
+{
+	powercycle_wsid = true;
+	pr_info("%s detected: using powercycle_wsid quirk\n", d->ident);
+
+	return 0;
+}
+
 static const struct dmi_system_id flr_surface_dmi_table[] = {
 	/*
 	 * Surface devices are needed to be taken care of on FLR
@@ -371,6 +387,23 @@ static const struct dmi_system_id flr_surface_dmi_table[] = {
 			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface Laptop 2"),
 		},
 	},
+	{
+		.callback = dmi_powercycle_wsid,
+		.ident = "Surface 3",
+		.matches = {
+			DMI_EXACT_MATCH(DMI_SYS_VENDOR, "Microsoft Corporation"),
+			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface 3"),
+		},
+	},
+	{
+		.callback = dmi_powercycle_wsid,
+		.ident = "Surface 3",
+		.matches = {
+			DMI_MATCH(DMI_BIOS_VENDOR, "American Megatrends Inc."),
+			DMI_MATCH(DMI_SYS_VENDOR, "OEMB"),
+			DMI_MATCH(DMI_PRODUCT_NAME, "OEMB"),
+		},
+	},
 	{}
 };
 
@@ -420,6 +453,59 @@ static int mwifiex_pcie_powercycle_quirk(struct pci_dev *pdev)
 	return 0;
 }
 
+static int mwifiex_pcie_powercycle_mshw0009_quirk(struct pci_dev *pdev)
+{
+	char *path = ACPI_WSID_PATH;
+	static guid_t mshw0009_dsm_guid;
+	acpi_handle handle;
+	union acpi_object *obj;
+	acpi_status status;
+
+	guid_parse(MSHW0009_DSM_UUID, &mshw0009_dsm_guid);
+
+	status = acpi_get_handle(NULL, path, &handle);
+	if (ACPI_FAILURE(status)) {
+		dev_alert(&pdev->dev, "No ACPI handle for path %s\n", path);
+		return -ENODEV;
+	}
+
+	if (!acpi_has_method(handle, "_DSM")) {
+		dev_alert(&pdev->dev, "_DSM method not found\n");
+		return -ENODEV;
+	}
+
+	if (!acpi_check_dsm(handle, &mshw0009_dsm_guid,
+						WSID_REV, WSID_FUNC_WIFI_PWR_OFF)) {
+		dev_alert(&pdev->dev, "_DSM method does not support requested "
+							  "function\n");
+		return -ENODEV;
+	}
+
+	/* For Surface 3, use _DSM method to power-cycle */
+	dev_alert(&pdev->dev, "powering off wifi...\n");
+	obj = acpi_evaluate_dsm(handle, &mshw0009_dsm_guid,
+								  WSID_REV, WSID_FUNC_WIFI_PWR_OFF,
+								  NULL);
+	if (!obj) {
+		dev_err(&pdev->dev, "device _DSM execution failed for power "
+							"off wifi\n");
+		return -ENODEV;
+	}
+
+	dev_alert(&pdev->dev, "powering on wifi...\n");
+	guid_parse(MSHW0009_DSM_UUID, &mshw0009_dsm_guid);
+	obj = acpi_evaluate_dsm(handle, &mshw0009_dsm_guid,
+								  WSID_REV, WSID_FUNC_WIFI_PWR_ON,
+								  NULL);
+	if (!obj) {
+		dev_err(&pdev->dev, "device _DSM execution failed for power "
+							"on wifi\n");
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
 /*
  * This function removes the interface and frees up the card structure.
  */
@@ -2959,6 +3045,11 @@ static void mwifiex_pcie_card_reset_work(struct mwifiex_adapter *adapter)
 {
 	struct pcie_service_card *card = adapter->card;
 
+	if (powercycle_wsid) {
+		mwifiex_pcie_powercycle_mshw0009_quirk(card->dev);
+		return;
+	}
+
 	/* We can't afford to wait here; remove() might be waiting on us. If we
 	 * can't grab the device lock, maybe we'll get another chance later.
 	 */
-- 
2.26.2

